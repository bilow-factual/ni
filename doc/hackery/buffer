#!/usr/bin/env perl
use File::Temp qw/tmpnam/;
use POSIX      qw/mkfifo/;

$|++;

if (tell(DATA) < 0) {
  # No data yet; allocate the fifo, modify ourselves, and print instructions to
  # access.
  my $fifo = tmpnam;
  mkfifo $fifo, 0700 or die "failed to create fifo: $!";
  $SIG{CHLD} = 'IGNORE';
  $SIG{HUP}  = 'IGNORE';

  open my $self_fh, ">> $0" or die "cannot append to self: $!";
  print $self_fh "\n__DATA__\n$fifo\n";
  close $self_fh;

  print STDERR "collecting data...\n";
  print STDERR "\$ $0 | less            # see data\n";
  print STDERR "\$ $0 --destroy         # self-destruct\n";

  my $retry = 0;
  $SIG{PIPE} = sub { ++$retry };
  my $line = '';
  while (1) {
    $retry = 0;
    open my $fifo_fh, "> $fifo" or die "failed to open fifo: $!";
    select((select($fifo_fh), $|++)[0]);
    print $fifo_fh $line;
    print $fifo_fh $line while !$retry && defined($line = <>);
    close $fifo_fh;
  }
} else {
  chomp(my $fifo = <DATA>);

  if (grep /^--destroy$/, @ARGV) {
    print STDERR "unlinking $fifo and $0...\n";
    unlink $fifo or die "failed to destroy the fifo ($fifo): $!";
    unlink $0    or die "failed to destroy self: $!";
  } else {
    print while <DATA>;
    close DATA;
    if (-p $fifo) {
      open my $self_fh, ">> $0"   or die "cannot append to self: $!";
      open my $fifo_fh, "< $fifo" or die "failed to open fifo: $!";
      select((select($self_fh), $|++)[0]);
      select((select($fifo_fh), $|++)[0]);
      while (<$fifo_fh>) {
        print $self_fh $_;
        print $_;
      }
      close $fifo_fh;
      close $self_fh;
    }
  }
}
