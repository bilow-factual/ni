Matrix conversions.
Dense to sparse creates a (row, column, value) stream from your data. Sparse to
dense inverts that. You can specify where the matrix data begins using a column
identifier; this is useful when your matrices are prefixed with keys.

defoperator dense_to_sparse => q{
  my ($col) = @_;
  $col ||= 0;
  my $n = 0;
  while (<STDIN>) {
    chomp;
    my @fs = split /\t/;
    my @k = $col ? @fs[0..$col-1] : ();
    print join("\t", @k, $n, $_, $fs[$_]), "\n" for $col..$#fs;
    ++$n;
  }
};

defoperator sparse_to_dense => q{
  my ($col) = @_;
  $col ||= 0;
  my $n = 0;
  my @q;
  while (defined($_ = @q ? shift @q : <STDIN>)) {
    chomp;
    my @r = split /\t/, $_, $col + 3;
    my $k = join "\t", @r[0..$col];
    my $kr = qr/\Q$k\E/;
    my @fs = $col ? @r[0..$col-1] : ();
    $fs[$r[$col+1]] = $r[$col+2];
    $fs[$1] = $2 while defined($_ = <STDIN>) && /^$kr\t([^\t]+)\t(.*)/;
    push @q, $_ if defined;
    print join("\t", map defined ? $_ : '', @fs), "\n";
  }
};

defshort '/X', pmap q{sparse_to_dense_op $_}, popt colspec1;
defshort '/Y', pmap q{dense_to_sparse_op $_}, popt colspec1;

NumPy interop.
Partitioned by the first row value and sent in as dense matrices.

use constant numpy_gen => gen pydent q{
  from numpy import *
  from sys   import stdin, stdout
  while True:
    dimensions = fromfile(stdin, dtype=dtype(">u4"), count=2)
    if len(dimensions) == 0: exit()
    x = fromfile(stdin, dtype=dtype("d"), count=dimensions[0]*dimensions[1]) \
        .reshape(dimensions)
    %body
    x = array(x)
    array(x.shape).astype(dtype(">u4")).tofile(stdout)
    x.astype(dtype("d")).tofile(stdout)
    stdout.flush()};

defoperator numpy_dense => q{
  my ($f) = @_;
  my ($i, $o) = sioproc {exec 'python', '-c', numpy_gen->(body => $f)};
  my @q;
  my ($rows, $cols);
  while (defined($_ = @q ? shift @q : <STDIN>)) {
    chomp;
    my ($k, @r) = split /\t/;
    $cols = @r;
    $rows = 1;
    my $kr = qr/\Q$k\E/;
    ++$rows, push @r, split /\t/, substr $_, length $1
      while defined($_ = <STDIN>) && /^($kr\t)/;
    push @q, $_ if defined;
    safewrite $i, pack "NNF*", $rows, $cols, @r;

    saferead $o, $_, 8;
    ($rows, $cols) = unpack "NN", $_;

    $_ = '';
    saferead $o, $_, $rows*$cols*8 - length(), length
      until $rows*$cols*8 == length;
    for my $r (0..$rows-1) {
      print join("\t", $k, unpack "F$cols", substr $_, $r*$cols*8), "\n";
    }
  }

  close $i;
  close $o;
  $o->await;
};

defshort '/N', pmap q{numpy_dense_op $_}, pycode;
