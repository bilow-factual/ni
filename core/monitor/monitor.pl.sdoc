Pipeline monitoring.
nfu provided a simple throughput/data count for each pipeline stage. ni can do
much more, for instance determining the cause of a bottleneck and previewing
data.

sub unit_bytes($) {
  return ($_[0] >> 10), "K" if $_[0] >> 10 < 99999;
  return ($_[0] >> 20), "M" if $_[0] >> 20 < 99999;
  return ($_[0] >> 30), "G" if $_[0] >> 30 < 99999;
  return ($_[0] >> 40), "T" if $_[0] >> 40 < 99999;
  return ($_[0] >> 50), "P";
}

defoperator monitor => q{
  BEGIN {eval {require Time::HiRes; Time::HiRes->import('time')}}
  my ($monitor_id, $monitor_name, $update_rate) = (@_, 1);
  my ($itime, $otime, $bytes) = (0, 0, 0);
  my $last_update = 0;
  my $start_time = time;
  while (1) {
    my $t1 = time; $bytes += my $n = saferead \*STDIN, $_, 65536;
    my $t2 = time; safewrite \*STDOUT, $_;
    my $t3 = time;

    $itime += $t2 - $t1;
    $otime += $t3 - $t2;
    last unless $n;

    if ($t3 - $last_update > $update_rate && $t3 - $start_time > 2) {
      $last_update = $t3;
      my $runtime = $t3 - $start_time || 1;
      my $width   = $ENV{COLUMNS} || 80;
      my $preview;
      if ($t3 & 3 && /\n(.*)\n/) {
        ($preview = substr $1, 0, $width - 20) =~ s/\t/  /g;
        $preview =~ s/[[:cntrl:]]/./g;
        $preview = substr $preview, 0, $width - 20;
      } else {
        $preview = substr $monitor_name, 0, $width - 20;
      }

      my $factor_log = log($otime / ($itime || 1)) / log 2;

      safewrite \*STDERR,
        sprintf "\033[%d;1H\033[K%5d%s %5d%s/s% 4d %s\n",
          $monitor_id + 1,
          unit_bytes $bytes,
          unit_bytes $bytes / $runtime,
          $factor_log * 10,
          $preview;
    }
  }
};

my $original_main_operator = $main_operator;
$main_operator = sub {
  my $n_ops = @_;
  return &$original_main_operator(@_)
    if $ENV{NI_NO_MONITOR} || $ENV{NI_NO_MONITORS};
  &$original_main_operator(
    map {;$_[$_], monitor_op($_, json_encode $_[$_], 0.1)} 0..$#_);
};
