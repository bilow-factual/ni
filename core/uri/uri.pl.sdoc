Resources identified by URI.
A way for ni to interface with URIs. URIs are self-appending like files; to
quote them you should use the `\'` prefix:

| ni http://google.com          # prints contents of google.com
  ni \'http://google.com        # prints "http://google.com"

If you've got a lot of resources, you can use `\'` with a lambda to quote all
of them:

| ni \'[ http://foo.com http://bar.com ]

c
BEGIN {

sub hadoop_name();

deflong '/resource',
  defdsp 'resourcealt', 'dispatch table for URI prefixes';

for my $op (qw/read write exists tmp nuke/) {
  %{"ni::resource_$op"} = ();
  *{"ni::resource_$op"} = sub ($) {
    my ($r) = @_;
    my ($scheme) = $r =~ /^([^:]+):/;
    my $f = ${"ni::resource_$op"}{$scheme} or
      die "ni: $scheme resources don't support the $op operation";
    &$f($r, sr $r, qr|^\Q$scheme://\E|, '');
  };
}

}

defoperator resource_quote => q{sio; print "$_[0]\n"};
defoperator resource_append => q{
  sio;
  my $decoder = siproc {sdecode};
  sforward resource_read $_[0], $decoder;
  close $decoder;
  $decoder->await;
};

defoperator resource_quote_many => q{sio; print "$_\n" for @_};

defshort "/'", pmap q{resource_quote_many_op @$_},
  pn 1, prc qr/\[/, prep(prc '[^]].*'), prc qr/\]/;

sub defresource($%) {
  my ($scheme, %opts) = @_;
  defresourcealt("'$scheme://",
    pmap qq{resource_quote_op "$scheme://\$_"}, prc '.*');
  defresourcealt("$scheme://",
    pmap qq{resource_append_op "$scheme://\$_"}, prc '.*');

  $resource_read{$scheme}   = fn $opts{read}   if exists $opts{read};
  $resource_write{$scheme}  = fn $opts{write}  if exists $opts{write};
  $resource_exists{$scheme} = fn $opts{exists} if exists $opts{exists};
  $resource_tmp{$scheme}    = fn $opts{tmp}    if exists $opts{tmp};
  $resource_nuke{$scheme}   = fn $opts{nuke}   if exists $opts{nuke};
}

Stream function extensions.
Add resource support to srfile and swfile.

my $original_srfile = \&srfile;
my $original_swfile = \&swfile;
my $original_glob_expand = \&glob_expand;

sub is_uri($) {$_[0] =~ /^[^:\/]+:\/\//}

*glob_expand = sub($) {
  return $_[0] if is_uri $_[0] or -e $_[0];
  glob $_[0];
};

*srfile = sub($) {
  return resource_read $_[0] if is_uri $_[0];
  &$original_srfile($_[0]);
};

*swfile = sub($) {
  return resource_write $_[0] if is_uri $_[0];
  &$original_swfile($_[0]);
};

Filesystem resources.
Things that behave like files: local files, HDFS, S3, sftp, etc.

sub uri_temp_noise() {"ni." . getpwuid($<) . "." . noise_str 32}

defresource 'file',
  read   => q{srfile $_[1]},
  write  => q{swfile $_[1]},
  exists => q{-e $_[1]},
  tmp    => q{"file://" . dor($ENV{TMPDIR}, '/tmp') . "/" . uri_temp_noise},
  nuke   => q{unlink $_[1]};

defresource 'sftp',
  read   => q{my ($host, $path) = $_[1] =~ m|^([^:/]+):?(.*)|;
              soproc {exec 'ssh', $host, 'cat', $path}};

defresource 'hdfs',
  read   => q{soproc {exec hadoop_name, 'fs', '-cat', $_[1]} @_},
  write  => q{siproc {sh hadoop_name . " fs -put - " . shell_quote($_[1]) . " 1>&2"} @_},
  exists => q{local $_;
              my $fh = soproc {exec hadoop_name, 'fs', '-stat', $_[1]} @_;
              saferead $fh, $_, 8192;
              close $fh;
              !$fh->await},
  tmp    => q{"hdfs://" . dor($ENV{NI_HDFS_TMPDIR}, '/tmp')
              . "/" . uri_temp_noise},
  nuke   => q{sh hadoop_name . ' fs -rm -r ' . shell_quote($_[1]) . " 1>&2"};

defresource 'hdfst',
  read => q{soproc {exec hadoop_name, 'fs', '-text', $_[1]} @_},
  nuke => q{sh hadoop_name . ' fs -rm -r ' . shell_quote($_[1]) . " 1>&2"};

defresource 's3cmd',
  read   => q{soproc {exec 's3cmd', 'get', "s3://$_[1]", '-'} @_},
  write  => q{siproc {exec 's3cmd', 'put', '-', "s3://$_[1]"} @_};
  # TODO

Network resources.

defresource 'http', read  => q{soproc {exec 'curl', '-sS', $_[0]} @_},
                    write => q{siproc {exec 'curl', '-sSd', '-', $_[0]} @_};

defresource 'https', read  => q{soproc {exec 'curl', '-sS', $_[0]} @_},
                     write => q{siproc {exec 'curl', '-sSd', '-', $_[0]} @_};
