Rendering support.
Rendering is treated like an asynchronous operation against the axis buffers. It ends up being re-entrant so we don't lock the browser thread, but those
details are all hidden inside a render request.

caterwaul(':all')(function () {
  render(state = null, last_render = 0)
        (axes, vm, l, ctx, w, h, cb) = state /eq[{a: axes, vm: vm, ctx: ctx, w: w, h: h, i: 17, vt: n[4] *[vm.transformer(x)] -seq, l: l,
                                                  id: (state && state.id && state.ctx === ctx && state.w === w && state.h === h
                                                       ? state.id
                                                       : ctx.getImageData(0, 0, w, h)) -se- it.data.fill(0)}]
                                -then- render_part /!requestAnimationFrame

Render function.
This is kind of subtle, so I'll explain how it all works. My liberal use of scare quotes is indicative of the amount of duplicity going on around here.

Rendering happens "asynchronously" -- that is, it's a time-bounded, reentrant process. The outermost loop governing the whole rendering process is driven by
requestAnimationFrame(), which calls into render_part(). render_part() runs for about 20ms, rendering 1/256th "random" slices of the data until it runs out of
time. The assumption here is that 1/256th of the data takes under 20ms, which empirically has been true on my machine.

The renderer works by modifying RGBA values in an ImageData object, which is a little tricky because all of the drawing operations need to be translucent:
conceptually we're rendering a volume rather than an opaque object. We also log-scale(-ish) the light output on the screen, so brightness(pixel) ~ log(volume
depth). This is all done without storing any extra per-pixel state. Here's a full list of the shader properties we want:

| 1. Singly-shaded pixels should be visible: i.e. rendered at rgb >= 64 (except for obvious counter-cases like slice focusing or distant points).
  2. Multiply-shaded pixels should converge to full luminosity _and preserve color_, with luminosity ~ log(total volume depth).
  3. Pixels should eventually saturate to white, losing color resolution as they gain luminosity. This should approximately double the dynamic range.
  4. The algorithm should be properly additive so that antialiasing works (we want 2x2 subpixel rendering).
  5. A bunch of very dim points should converge to the right color average (i.e. we can't lose too much detail to 8-bit quantization).
  6. The total onscreen brightness should remain about the same regardless of how many points are on the screen (otherwise zooming would dim the display).

So here's roughly how this all works. The RGB channels store full-value color all the time: this is a brightness-weighted average of the colors drawn into that
pixel. Brightness is stored in the alpha channel and converges to 255 by a halving sequence (128, 192, 224, ...) if all points are rendered at the same
intensity.

Point intensity is randomized for every pixel shading operation. (TODO: explain this)

  -where[render_part = function (rt) {var t  = +new Date,     ax=state.a[0], ay=state.a[1], xt=state.vt[0], yt=state.vt[1], width  = state.id.width,
                                          id = state.id.data, az=state.a[2], aw=state.a[3], zt=state.vt[2], wt=state.vt[3], height = state.id.height,
                                          s  = width /-Math.min/ height >> 1, n = state.a[0].end(), use_hue = !!aw, cx = width>>1, cy = height>>1,
                                          l  = state.l * (width*height / 3) / n;
                                      if (state.i) render_part /!requestAnimationFrame;
                                      if (rt - last_render < 5) return; else last_render = rt;
                                      for (var i = state.i; (i &= 0xff) && +new Date - t < 20; i += 17) for (; i < n; i += 256)
                                      { var w  = aw ? i /!aw.pnorm : 0, x  = ax ? i /!ax.p : 0, y  = ay ? i /!ay.p : 0, z  = az ? i /!az.p : 0,
                                            wi = 1 / wt(x, y, z),       xp = wi * xt(x, y, z),  yp = wi * yt(x, y, z),  zp = wi * zt(x, y, z);
                                        if (zp > 0) {var r  = use_hue ? 1 - 2*(1/2 - Math.abs(.5  - w)) |-Math.min| 1 |-Math.max| 0.1 : 1,
                                                         g  = use_hue ?     2*(1/2 - Math.abs(1/3 - w)) |-Math.min| 1 |-Math.max| 0.1 : 1,
                                                         b  = use_hue ?     2*(1/2 - Math.abs(2/3 - w)) |-Math.min| 1 |-Math.max| 0.1 : 1,
                                                         zi = 1/zp, tx = cx + xp*zi*s, ty = cy - yp*zi*s, sx = tx|0, sy = ty|0;
                                          if (sx >= 0 && sx < width-1 && sy >= 0 && sy < height-1)
                                          { tx -= sx; ty -= sy;
                                            if (zi > 2) for (var dx = 0; dx <= 1; ++dx) for (var dy = 0; dy <= 1; ++dy)
                                                        { var pi = (sy+dy)*width + sx+dx << 2, op = (1 - Math.abs(dx-tx)) * (1 - Math.abs(dy-ty)),
                                                              li = l * zi*zi * op * 256 / (32 + ((id[pi|3] |= 128) & 127)) |-Math.max| 8;
                                                          id[pi|0] += r*li|3; id[pi|1] += g*li|3; id[pi|2] += b*li|3; id[pi|3] += li|0 }
                                            else        { var pi = sy*width + sx << 2, li = l * zi*zi * 256 / (32 + ((id[pi|3] |= 128) & 127)) |-Math.max| 8;
                                                          id[pi|0] += r*li|3; id[pi|1] += g*li|3; id[pi|2] += b*li|3; id[pi|3] += li|0 }}}}
                                      state.ctx.clearRect(0, 0, width, height); state.ctx.putImageData(state.id, 0, 0);
                                      state.i = i}]})();
