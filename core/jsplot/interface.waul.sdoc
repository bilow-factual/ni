Page driver.

$(caterwaul(':all')(function ($) {
  setup_event_handlers(),
  where[tau = Math.PI * 2, screen  = $('#screen'),    sc = screen[0]  /~getContext/ '2d',
        w   = $(window),   overlay = $('#overlay'),   oc = overlay[0] /~getContext/ '2d',
                           tr      = $('#transform'), lw = 0, mx = null, ms = false,
                           status  = $('#status'),    lh = 0, my = null, mc = false,
                           preview = $('#preview'),

        default_settings       = {ni: "//ni psplit// pord p'r pl 3' p'($_)x16' ,jABC.5 p'r prec(a+50, c*3.5+a*a/500), b, sin(a/100) + sin(b/100)' "
                                      + ",qABCD0.01 p'r a, - c, b, d'",
                                  r: [0, -0.0051], s: [1, 1, 1], c: [0, -0.28, 0], f: [0, 0, 0], d: 0.6},
        settings(x)            = x ? document.location.hash /eq[x /!JSON.stringify /!encodeURIComponent]
                                   : document.location.hash.substr(1) /!decodeURIComponent /!JSON.parse -rescue- {} /-$.extend/ default_settings,
        set(k, v)              = settings() /-$.extend/ ({} -se- it[k] /eq.v) /!settings,

        drag(dx, dy, s, c)     = c ? 'd' /-set/ (settings().d * Math.exp(2 * dy / lh))
                               : s ? 'r' /-set/ [r[0] + dx / lw, r[1] - dy / lh]       -where [r = settings().r]
                               :     'c' /-set/ [c[0] + dx / lw, c[1] - dy / lh, c[2]] -where [c = settings().c],

        size_changed()         = (lw !== cw || lh !== ch) -se [lw = cw, lh = ch] -where [cw = w.width(), ch = w.height()],
        resize_canvases()      = overlay.add(screen) /~attr/ {width: lw, height: lh} -then- update_screen(),
        resize_other_stuff()   = tr      /~css/ {height: 0} /~css/ {height: tr[0].scrollHeight - 2, width: lw-2}
                          -then- preview /~css/ {top: tr.height() + 3, bottom: 1},
        handle_resizes()       = resize_canvases() -when- size_changed() -then- resize_other_stuff(),

        status_timeout         = null,
        update_status(t)       = status /~text/ t /~addClass/ 'active' -then- status_timeout /!clearTimeout /when.status_timeout
                                                                       -then- status_timeout /eq["status /~removeClass/ 'active'".qf /-setTimeout/ 500],

        setup_event_handlers() = tr /~keydown/ given.e [e.which === 13 && !e.shiftKey ? visualize(tr.val()) -then- false : true]
                                      /~keyup/ given.e ['ni' /-set/ tr.val()]
                                        /~val/ settings().ni
                          -then- overlay     /~mousedown/ given.e [mx = e.pageX, my = e.pageY, ms = e.shiftKey, mc = e.ctrlKey]
                                            /~mousewheel/ given.e ['d' /-set/ (settings().d * Math.exp(e.deltaY * -0.01)), update_screen()]
                          -then- $(document) /~mousemove/ given.e [drag(x - mx, y - my, ms, mc), mx = x, my = y, update_screen(),
                                                                   where [x = e.pageX, y = e.pageY], when.mx]
                                               /~mouseup/ given.e [mx = null, update_screen(), when.mx]
                          -then- $('canvas').attr('unselectable', 'on').css('user-select', 'none').on('selectstart', false)
                          -then- $('.autohide') /~click/ "$(this) /~toggleClass/ 'pinned'".qf
                          -then- tr.val() /!visualize,

        data_state           = {axes: null, bytes: 0, last_render: 0, preview: ''},
        reset_data_state()   = data_state = {axes: null, bytes: 0, last_render: 0, preview: ''} -se- preview /~text/ '',

        data_was_revised(ls) = update_screen() /when[+new Date - data_state.last_render > data_state.axes[0].end() / 100]
                      -then- '#{data_state.axes.length} / #{data_state.axes[0].n} / #{(data_state.bytes += ls /[0][x0 + x.length + 1] -seq) >>> 10}K'
                             /!update_status
                      -then- preview /~text/ data_state.preview /when[data_state.preview.length < 65536 && (data_state.preview += ls.join("\n") + "\n")],

        visualize(cmd)     = reset_data_state() -then- ni_ws(cmd, handle_data)
                           -where [infer_n_axes(ls)   = ls /[0][x0 /-Math.max/ x.length] -seq |-Math.min| 4,
                                   update_n_axes(ls)  = data_state.axes /eq[n[ls /!infer_n_axes] *[new axis(1048576*4)] -seq] -unless- data_state.axes,
                                   handle_data(lines) = lines *![x.split(/\t/) /!populate_axes] -seq -then- data_was_revised(lines),
                                   populate_axes(l)   = l /!update_n_axes -then- data_state.axes *!a[a.push(+l[ai] || 0, r)] /seq -where [r = Math.random()]],

        object_matrix()    = matrix.prod(matrix.translate(c[0], c[1], c[2]), matrix.rotate_x(-r[1]*tau), matrix.rotate_y(-r[0]*tau),
                                         matrix.scale(s[0], s[1], s[2]),
                                         matrix.translate(f[0], f[1], f[2])) -where [st = settings(), c = st.c, r = st.r, s = st.s, f = st.f],

        normalize_matrix() = matrix.scale(1/sx, 1/sy, 1/sz) /~dot/ matrix.translate(-cx, -cy, -cz)
                      -where[as = data_state.axes, sx = as[0] && as[0].range() || 1, sy = as[1] && as[1].range() || 1, sz = as[2] && as[2].range() || 1,
                                                   cx = as[0] ? as[0].offset() : 0,  cy = as[1] ? as[1].offset() : 0,  cz = as[2] ? as[2].offset() : 0],

        camera_matrix()    = matrix.translate(0, 0, settings().d) /~dot/ object_matrix() /~dot/ normalize_matrix(),
        update_screen()    = handle_resizes()
                      -then- render(data_state.axes, camera_matrix(), 1, sc, screen.width(), screen.height()) -then- data_state.last_render /eq[+new Date]
                      -when [data_state.axes && +new Date - data_state.last_render > 30]]}));
