HTTP server.
A very simple HTTP server that can be used to serve a stream's contents. The
server is defined solely in terms of a function that takes a URL and returns
data, optionally specifying the content type.

use Socket;
use Errno qw/EINTR/;

sub http_reply($$$%) {
  my ($fh, $code, $body, %headers) = @_;
  $fh->print(join "\n", "HTTP/1.1 $code NI",
                        map("$_: $headers{$_}", sort keys %headers),
                        "Content-Length: " . length($body),
                        '',
                        $body);
}

sub uri_decode(@) {
  my ($u) = @_;
  $u =~ s/%(..)/chr hex $1/eg;
  $u;
}

sub safeaccept($$) {
  my $r;
  1 until $r = accept $_[0], $_[1] or !$!{EINTR};
  $r;
}

sub http($$) {
  my (undef, $f) = @_;
  my ($server, $client);
  $f = fn $f;

  socket $server, PF_INET, SOCK_STREAM, getprotobyname 'tcp'
    or die "ni http: socket() failed: $!";
  setsockopt $server, SOL_SOCKET, SO_REUSEADDR, pack 'l', 1
    or die "ni http: setsockopt() failed: $!";

  ++$_[0] > 65535 && die "ni http: bind() failed: $!"
    until bind $server, sockaddr_in $_[0], INADDR_ANY;

  listen $server, SOMAXCONN or die "ni http: listen() failed: $!";

  &$f;
  for (; $_ = '', safeaccept $client, $server; close $client) {
    next if cfork;
    close $server;
    sysread $client, $_, 8192, length until /\r?\n\r?\n/;
    &$f(uri_decode(/^GET (.*) HTTP\//), $_, $client);
    exit;
  }
}

defoperator http_websocket_encode => q{
  load 'core/http/ws.pm';
  print ws_encode($_) while <STDIN>;
};

deflong '/http/wse', pmap q{http_websocket_encode_op}, prc '--http/wse$';
