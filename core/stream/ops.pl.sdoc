Streaming data sources.
Common ways to read data, most notably from files and directories. Also
included are numeric generators, shell commands, etc.

$main_operator = sub {
  -t STDIN ? close STDIN : sicons {sdecode};
  @$_ && sicons {operate @$_} for @_;
  exec 'less' or exec 'more' if -t STDOUT;
  sforward \*STDIN, \*STDOUT;
};

use constant shell_command => prc '.*';

defoperator cat  => q{my ($f) = @_; sappend {scat $f}};
defoperator echo => q{my ($x) = @_; sappend {print "$x\n"}};
defoperator sh   => q{my ($c) = @_; sappend {exec $c}};

Note that we generate numbers internally rather than shelling out to `seq`
(which is ~20x faster than Perl for the purpose, incidentally). This is
deliberate: certain versions of `seq` generate floating-point numbers after a
point, which can cause unexpected results and loss of precision.

defoperator n => q{
  my ($l, $u) = @_;
  sappend {for (my $i = $l; $i < $u; ++$i) {print "$i\n"}};
};

defshort '/n',   pmap q{n_op 1, $_ + 1}, number;
defshort '/n0',  pmap q{n_op 0, $_}, number;
defshort '/id:', pmap q{echo_op $_}, prc '.*';

defshort '/$:',  pmap q{sh_op $_}, shell_command;
defshort '/sh:', pmap q{sh_op $_}, shell_command;

deflong '/fs', pmap q{cat_op $_}, filename;

Quoted ni invocation.
Just like nfu's @[] lambda syntax.

defoperator ni => q{exec_ni @_};
deflong '/@[]', pmap q{ni_op @$_}, pn 1, prx '@', plambda '';

Shell transformation.
Pipe through a shell command. We also define a command to duplicate a stream
through a shell command.

defoperator pipe => q{exec $_[0] or die "ni: failed to exec $_[0]: $!"};
defshort '/$=', pmap q{pipe_op $_}, shell_command;

defoperator tee => q{
  my ($cmd) = @_;
  open my $fh, "| $cmd" or die "ni: tee $cmd failed: $!";
  stee \*STDIN, $fh, \*STDOUT;
};
defshort '/$^', pmap q{tee_op $_}, shell_command;

Sinking.
We can sink data into a file just as easily as we can read from it. This is
done with the `>` operator, which is typically written as `\>`. The difference
between this and the shell's > operator is that \> outputs the filename; this
lets you invert the operation with the nullary \< operator.

use constant tmpdir => $ENV{TMPDIR} || "/tmp";
sub tempfile_name() {
  my $r = '/';
  $r = tmpdir . "/ni-$$-" . noise_str 8 while -e $r;
  $r;
}

defoperator file_tee   => q{stee \*STDIN, swfile($_[0]), \*STDOUT};
defoperator file_read  => q{chomp, scat $_ while <STDIN>};
defoperator file_write => q{
  my ($file) = @_;
  $file = tempfile_name unless defined $file;
  sforward \*STDIN, swfile $file;
  print "$file\n";
};

defshort '/>%', pmap q{file_tee_op $_},   nefilename;
defshort '/>',  pmap q{file_write_op $_}, nefilename;
defshort '/<',  pmap q{file_read_op},     pnone;

Compression and decoding.
Sometimes you want to emit compressed data, which you can do with the `Z`
operator. It defaults to gzip, but you can also specify xz, lzo, lz4, or bzip2
by adding a suffix. You can decode a stream in any of these formats using `ZD`
(though in most cases ni will automatically decode compressed formats).

our %compressors = qw/ g gzip  x xz  o lzop  4 lz4  b bzip2 /;

use constant compressor_name => prx '[gxo4b]';
use constant compressor_spec =>
  pmap q{my ($c, $level) = @$_;
         $c = $compressors{$c || 'g'};
         defined $level ? pipe_op "$c -$level" : pipe_op $c},
  pseq popt compressor_name, popt integer;

defoperator sink_null => q{1 while saferead \*STDIN, $_, 8192};
defoperator decode    => q{sdecode};

defshort '/Z',  compressor_spec;
defshort '/ZN', pk sink_null_op();
defshort '/ZD', pk decode_op();
