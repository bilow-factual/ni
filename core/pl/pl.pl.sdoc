Perl wrapper.
Defines the `p` operator, which can be modified in a few different ways to do
different things. By default it functions as a one-in, many-out row
transformer.

use constant perl_mapgen => gen q{
  %prefix
  close STDIN;
  open STDIN, '<&=3' or die "ni: failed to open fd 3: $!";
  sub row {
    %body
  }
  while (defined rl) {
    %each
  }
};

use constant perl_prefix =>
  join "\n", @self{qw| core/pl/util.pm
                       core/pl/math.pm
                       core/pl/stream.pm
                       core/gen/gen.pl
                       core/json/json.pl
                       core/pl/reducers.pm |};

sub stdin_to_perl($) {
  move_fd 0, 3;
  safewrite siproc {exec 'perl', '-'}, $_[0];
}

sub perl_code($$) {perl_mapgen->(prefix => perl_prefix,
                                 body   => $_[0],
                                 each   => $_[1])}

sub perl_mapper($)  {perl_code $_[0], 'pr for row'}
sub perl_grepper($) {perl_code $_[0], 'pr if row'}
sub perl_facet($)   {perl_code $_[0], 'pr row . "\t$_"'}

defoperator perl_mapper  => q{stdin_to_perl perl_mapper  $_[0]};
defoperator perl_grepper => q{stdin_to_perl perl_grepper $_[0]};
defoperator perl_facet   => q{stdin_to_perl perl_facet   $_[0]};

our @perl_alt = pmap q{perl_mapper_op $_}, pplcode \&perl_mapper;

defshort '/p', paltr @perl_alt;

sub defperlalt($) {unshift @perl_alt, $_[0]}

defrowalt pmap q{perl_grepper_op $_},
          pn 1, prx 'p', pplcode \&perl_grepper;

deffacetalt 'p', pmap q{[perl_facet_op($$_[0]),
                         row_sort_op('-k1b,1'),
                         perl_mapper_op($$_[1])]},
                 pseq pplcode \&perl_facet,
                      pplcode \&perl_mapper;
