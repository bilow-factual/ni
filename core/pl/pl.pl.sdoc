Perl wrapper.
Defines the `p` operator, which can be modified in a few different ways to do
different things. By default it functions as a one-in, many-out row
transformer.

use constant perl_mapgen => gen q{
  %prefix
  close STDIN;
  open STDIN, '<&=3' or die "ni: failed to open fd 3: $!";
  sub row {
    %body
  }
  while (defined rl) {
    %each
  }
};

our @perl_prefix = qw| core/pl/util.pm
                       core/pl/math.pm
                       core/pl/stream.pm
                       core/gen/gen.pl
                       core/json/json.pl
                       core/pl/reducers.pm |;

sub perl_prefix() {join "\n", @self{@perl_prefix}}

c
BEGIN {
  defoperator perl_code => q{
    my ($body, $each) = @_;
    move_fd 0, 3;
    safewrite siproc {exec 'perl', '-'},
              perl_mapgen->(prefix => perl_prefix,
                            body   => $body,
                            each   => $each);
  };
}

sub perl_mapper($)  {perl_code_op $_[0], 'pr for row'}
sub perl_grepper($) {perl_code_op $_[0], 'pr if row'}
sub perl_facet($)   {perl_code_op $_[0], 'pr row . "\t$_"'}

our @perl_alt = pmap q{perl_mapper $_}, pplcode;

defshort '/p', paltr @perl_alt;

sub defperlalt($) {unshift @perl_alt, $_[0]}

defrowalt pmap q{perl_grepper $_}, pn 1, prx 'p', pplcode;

deffacetalt 'p', pmap q{[perl_facet $$_[0],
                         row_sort_op('-k1b,1'),
                         perl_mapper $$_[1]]}, pseq pplcode, pplcode;
