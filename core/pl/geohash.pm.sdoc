Fast, portable geohash encoder.
A port of https://www.factual.com/blog/how-geohashes-work that works on 32-bit
Perl builds.

our @geohash_alphabet = split //, '0123456789bcdefghjkmnpqrstuvwxyz';
our %geohash_decode   = map(($geohash_alphabet[$_], $_), 0..$#geohash_alphabet);

sub morton_gap($) {
  my ($x) = @_;
  $x |= $x << 8;  $x &= 0x00ff00ff;
  $x |= $x << 4;  $x &= 0x0f0f0f0f;
  $x |= $x << 2;  $x &= 0x33333333;
  return ($x | $x << 1) & 0x55555555;
}

sub morton_ungap($) {
  my ($x) = @_;  $x &= 0x55555555;
  $x ^= $x >> 1; $x &= 0x33333333;
  $x ^= $x >> 2; $x &= 0x0f0f0f0f;
  $x ^= $x >> 4; $x &= 0x00ff00ff;
  return ($x ^= $x >> 8) & 0x0000ffff;
}

sub geohash_encode {
  local $_;
  my ($lat, $lng, $precision) = (@_, 12);
  my $unit_lat = ($lat + 90)  / 180;
  my $unit_lng = ($lng + 180) / 360;
  my $high_30  = morton_gap($unit_lat * 0x8000)
               | morton_gap($unit_lng * 0x8000) << 1;
  my $low_30   = morton_gap($unit_lat * 0x40000000 & 0x7fff)
               | morton_gap($unit_lng * 0x40000000 & 0x7fff) << 1;

  my $gh12 = join '', map($geohash_alphabet[$high_30 >> 30 - 5*$_ & 31], 1..6),
                      map($geohash_alphabet[$low_30  >> 30 - 5*$_ & 31], 1..6);
  substr $gh12, 0, $precision;
}

sub geohash_decode {
  local $_;
  my $gh12 = $_[0] . "0" x 12;
  my ($low_30, $high_30) = (0, 0);
  for (0..5) {
    $low_30  = $low_30  << 5 | $geohash_decode{lc substr $gh12, $_ + 6, 1};
    $high_30 = $high_30 << 5 | $geohash_decode{lc substr $gh12, $_    , 1};
  }
  my $lat_int = morton_ungap($low_30)      | morton_ungap($high_30)      << 15;
  my $lng_int = morton_ungap($low_30 >> 1) | morton_ungap($high_30 >> 1) << 15;
  ($lat_int / 0x40000000 * 180 - 90, $lng_int / 0x40000000 * 360 - 180);
}

c
BEGIN {*ghe = \&geohash_encode;
       *ghd = \&geohash_decode}
