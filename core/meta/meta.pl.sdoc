Image-related data sources.
Long options to access ni's internal state. Also the ability to instantiate ni
within a shell process.

defoperator meta_image => q{sio; print image, "\n"};
defoperator meta_keys  => q{sio; print "$_\n" for sort keys %self};
defoperator meta_key   => q{my @ks = @_; sio; print "$_\n" for @self{@ks}};

defoperator meta_help => q{
  my ($topic) = @_;
  $topic = 'tutorial' unless length $topic;
  sio; print $self{"doc/$topic.md"} . "\n";
};

defshort '///',        pmap q{meta_key_op $_}, prc '[^][]+$';
defshort '///ni',      pmap q{meta_image_op},  pnone;
defshort '///ni/keys', pmap q{meta_keys_op},   pnone;

Documentation options.
These are listed under the `//help` prefix. This isn't a toplevel option
because it's more straightforward to model these as data sources.

sub meta_context_name($) {$_[0] || '<root>'}

defshort '///help', pmap q{meta_help_op $_}, popt prx '/(.*)';

defoperator meta_options => q{
  sio;
  for my $c (sort keys %contexts) {
    printf "%s\tlong\t%s\t%s\n",  meta_context_name $c, $long_names{$c}[$_], abbrev dev_inspect_nonl $long_refs{$c}[$_],  40 for       0..$#{$long_refs{$c}};
    printf "%s\tshort\t%s\t%s\n", meta_context_name $c, $_,                  abbrev dev_inspect_nonl $short_refs{$c}{$_}, 40 for sort keys %{$short_refs{$c}};
  }
};

defshort '///options', pmap q{meta_options_op}, pnone;

Inspection.
This lets you get details about specific operators or parsing contexts.

defoperator meta_op  => q{sio; print "sub {$operators{$_[0]}}\n"};
defoperator meta_ops => q{sio; print "$_\n" for sort keys %operators};

defshort '///op/', pmap q{meta_op_op $_}, prc '(.+)';
defshort '///ops', pmap q{meta_ops_op},   pnone;

The backdoor.
Motivated by `bugs/2016.0918-replicated-garbage`. Lets you eval arbitrary Perl
code within this process, and behaves like a normal streaming operator.

defoperator dev_backdoor => q{ni::eval $_[0]};
defshort '/--dev/backdoor', pmap q{dev_backdoor_op $_}, prx '.*';

# Used for regression testing
defoperator dev_local_operate => q{
  my ($lambda) = @_;
  my ($stdin, @exec) = sni_exec_list @$lambda;
  my $fh = siproc {exec @exec};
  safewrite $fh, $stdin;
  sforward \*STDIN, $fh;
  close $fh;
  $fh->await;
};

defshort '/--dev/local-operate', pmap q{dev_local_operate_op $_}, _qfn;
