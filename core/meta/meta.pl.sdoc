Image-related data sources.
Long options to access ni's internal state. Also the ability to instantiate ni
within a shell process.

defoperator 'meta_image', q{sappend {print image, "\n"}};
defoperator 'meta_keys',  q{sappend {print "$_\n" for @keys}};
defoperator 'meta_key',   q{my @ks = @_; sappend {print "$_\n" for @self{@ks}}};

defoperator 'meta_help', q{
  my ($topic) = @_;
  $topic = 'tutorial' unless length $topic;
  sappend {print $self{"doc/$topic.md"}, "\n"};
};

deflong '/meta_key',  pmap q{meta_key_op $_}, prc '//([^][]+)$';
deflong '/meta_keys', pmap q{meta_keys_op},   prc '//$';
deflong '/meta_self', pmap q{meta_image_op},  prc '//ni';

Documentation options.
These are listed under the `//help` prefix. This isn't a toplevel option
because it's more straightforward to model these as data sources.

deflong '/meta_help', pmap q{meta_help_op $_}, prc '//help/?(.*)';

defoperator 'meta_options', q{
  for my $c (sort keys %contexts) {
    printf "%s\tshort\t%s\t%s\n", $c, $_, sgr dev_inspect($short_refs{$c}->{$_}), qr/\n/, ' ' for sort keys %{$short_refs{$c}};
    printf "%s\tlong\t%s\t%s\n",  $c,     sgr dev_inspect($_),                    qr/\n/, ' ' for           @{$long_refs{$c}};
  }
};

deflong '/meta_options', pmap q{meta_options_op}, prc '//options';
