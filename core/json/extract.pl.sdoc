Targeted extraction.
ni gives you ways to decode JSON, but you aren't likely to have data stored as
JSON objects in the middle of data pipelines. It's more of an archival format,
so the goal is to unpack stuff quickly. ni gives you a way of doing this that
is usually much faster than running the full decoder. (And also requires less
typing.)

The set of operations is basically this:

| .foo          # direct object key access (not very fast)
  ..foo         # multiple indirect object key access (fast-ish)
  :foo          # single indirect object key access (very fast)
  [0]           # array access (slow)
  []            # array flatten (slow)

Operations compose by juxtaposition: `.foo[0]:bar` means "give me the value of
every 'bar' key within the first element of the 'foo' field of the root
object".

Extracted values are flattened into a single array and returned. They're
optimized for strings, numeric, and true/false/null; you can return other
values, but it will be slower.

# TODO: replace all of this

use constant json_si_gen => gen q#
  (/"%k":\s*/g ? /\G("[^\\\\"]*")/            ? json_unescape $1
               : /\G("(?:[^\\\\"]+|\\\\.)*")/ ? json_unescape $1
               : /\G([^][{},]+)/              ? "" . $1
               : undef
               : undef) #;

sub json_extractor($) {
  my @pieces = split /\s*,\s*/, $_[0];
  die "ni: json_extractor is not really written yet"
    if grep !/^:\w+$/, @pieces;

  my @compiled = map json_si_gen->(k => qr/\Q$_\E/),
                 map sr($_, qr/^:/, ''), @pieces;
  join ',', @compiled;
}

defoperator destructure => q{
  ni::eval gen(q{binmode STDOUT, ":encoding(utf-8)";
                 while (<STDIN>) {print join("\t", %e), "\n"}})
            ->(e => json_extractor $_[0]);
};

defshort '/D', pmap q{destructure_op $_}, pgeneric_code;
