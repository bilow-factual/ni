Here's how this works.
I'm using awk to provide duplication to keep the ni image small. ni uses a
resource stream that this script parses into various C string arrays (to work
around C99's limitation of 509 characters per string literal). Some of these
resources are also interpolated as code; all code is emitted last.

Resources are written as a name followed by the number of lines taken. For
example:

| 3 foo.html
  <html>
  <body>hello there</body>
  </html>
  1 bar.js
  alert('hi');

Any resource ending in .c is interpolated in the order in which it appears in
the resource stream.

{
  if (!ls--) {
    if (r) print "0};"
    interp = (rs[rn++] = r = $2) ~ /\.c$/
    ra[r] = "q" gensub("\\W", "_", "g", r)
    ls = $1
    if (r) print "static const char *const " ra[r] "[] = {"
  } else {
    if (interp) code[c++] = $0
    gsub("\\\\", "\\\\")
    gsub("\"", "\\\"")
    print "\"" $0 "\\n\","
  }
}
END {
  if (r) print "0};"
  print "static char const *const rn[] = {"
  for (i = 0; i < rn; ++i) print "\"" rs[i] "\","
  print "0};"

  print "static char const *const *const rs[] = {"
  for (i = 0; i < rn; ++i) print ra[rs[i]] ","
  print "0};"

  for (i = 0; i < c; ++i) print code[i]
}
