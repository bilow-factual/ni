HTTP server.
A very simple HTTP server that can be used to serve a stream's contents. The
server is defined solely in terms of a function that takes a URL and returns
data, optionally specifying the content type.

The code to drive the HTTP server arrives as stdin, and the optional hostname
and port are specified as @ARGV. If omitted, they default to 127.0.0.1 and
random.

use Socket;

socket S, PF_INET, SOCK_STREAM, getprotobyname 'tcp'
  or die "ni_http: socket() failed: $!";

setsockopt S, SOL_SOCKET, SO_REUSEADDR, pack 'l', 1
  or die "ni_http: setsockopt() failed: $!";

my ($port) = (@ARGV, 1024);
@ARGV = ();
++$port > 65535 && die "ni_http: bind() failed: $!"
  until bind S, sockaddr_in $port, INADDR_ANY;

listen S, SOMAXCONN or die "ni_http: listen() failed: $!";

sub http_reply($$%) {
  my ($code, $body, %headers) = @_;
  print "HTTP/1.1 $code NI\n";
  print "$_: $headers{$_}\n" for sort keys %headers;
  print "Content-Length: " . length($body) . "\n\n";
  print $body;
}

sub uri_decode(@) {
  my ($u) = @_;
  $u =~ s/%(..)/chr hex $1/eg;
  $u;
}

sub http(&) {
  my ($f) = @_;
  for (; $_ = '', accept C, S; close C) {
    1 while 0 < waitpid -1, WNOHANG;
    next if fork;
    close S;
    sysread C, $_, 8192, length until /\r?\n\r?\n$/;
    *STDOUT = C;
    pr for &$f(uri_decode(/^GET (.*) HTTP\//), $_);
    exit;
  }
}
