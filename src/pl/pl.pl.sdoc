Perl wrapper.
Defines the `p` operator, which can be modified in a few different ways to do
different things. By default it functions as a one-in, many-out row
transformer.

use constant perl_mapgen => gen q{
  %prefix
  close STDIN;
  open STDIN, '<&=3' or die "ni: failed to open fd 3: $!";
  sub row {
    %body
  }
  while (defined rl) {
    %each
  }
};

sub perl_prefix() {join "\n", @self{qw| core/pl/util.pm
                                        core/pl/math.pm
                                        core/pl/stream.pm
                                        core/gen/gen.pl
                                        core/pl/reducers.pm |}}

sub perl_gen($$) {sh [qw/perl -/],
  stdin => perl_mapgen->(prefix => perl_prefix,
                         body   => $_[0],
                         each   => $_[1])}

sub perl_mapper($)  {perl_gen $_[0], 'pr for row'}
sub perl_grepper($) {perl_gen $_[0], 'pr if row'}
sub perl_facet($)   {perl_gen $_[0], 'pr row . "\t$_"'}

our @perl_alt = (pmap {perl_mapper $_} plcode);

defshort 'root', 'p', altr @perl_alt;

unshift @row_alt, pmap {perl_grepper $_} pn 1, mr '^p', plcode;

$facet_chalt{p} = pmap {[perl_facet $$_[0],
                         sh(['ni_sort', '-k1,1'], prefix => row_pre),
                         perl_mapper $$_[1]]} seq plcode, plcode;
