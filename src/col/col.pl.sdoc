Column manipulation operators.
In root context, ni interprets columns as being tab-delimited.

Column selection.
Normally perl is fast at text manipulation, but on most UNIX systems
`/usr/bin/cut` is at least an order of magnitude faster. We can use it if two
conditions are met:

| 1. All addressed columns are at index 8 (9 if one-based) or lower.
  2. The addressed columns are in ascending order.

sub col_cut {
  my ($floor, $rest, @fs) = @_;
  sh 'cut', '-f', join ',', $rest ? (@fs, "$floor-") : @fs;
}

our $cut_gen = gen q{chomp; @_ = split /\t/; print join("\t", @_[%is]), "\n"};

sub ni_cols(@) {
  # TODO: this function shouldn't be parsing column specs
  my $ind   = grep /[^A-I.]/, @_;
  my $asc   = join('', @_) eq join('', sort @_);
  my @cols  = map /^\.$/ ? -1 : ord($_) - 65, @_;
  my $floor = (sort {$b <=> $a} @cols)[0] + 1;
  return col_cut $floor, scalar(grep $_ eq '.', @_), @cols if $ind && $asc;

  sh ['perl', '-ne',
      $cut_gen->(is => join ',', map $_ == -1 ? "$floor..\$#_" : $_, @cols)];
}

our @col_alt = (pmap {ni_cols split //, $_} colspec);

defshort 'root', 'f', altr @col_alt;

Column swapping.
This is such a common thing to do that it gets its own operator `x`. The idea
is that you're swapping the specified column(s) into the first N position(s).

sub ni_colswap(@) {
  # TODO after we do the colspec parsing refactor
}

Column splitting.
Adapters for input formats that don't have tab delimiters. Common ones are,
with their split-spec mnemonics:

| commas:       C
  pipes:        P
  whitespace:   S
  non-words:    W

You can also field-split on arbitrary regexes, or extend the %split_chalt hash
to add custom split operators.

sub ni_split_chr($)   {sh 'perl', '-lnpe', "y/$_[0]/\\t/"}
sub ni_split_regex($) {sh 'perl', '-lnpe', "s/$_[0]/\$1\\t/g"}
sub ni_scan_regex($)  {sh 'perl', '-lne',  'print join "\t", /' . "$_[0]/g"}

our %split_chalt = (
  'C' => (pmap {ni_split_chr   ','}              none),
  'P' => (pmap {ni_split_chr   '|'}              none),
  'S' => (pmap {ni_split_regex qr/\h+/}          none),
  'W' => (pmap {ni_split_regex qr/[^\w\n]+/}     none),
  '/' => (pmap {ni_split_regex $_}               regex),
  ':' => (pmap {ni_split_chr   $_}               mr '^.'),
  'm' => (pn 1, mr '^/', pmap {ni_scan_regex $_} regex),
);

defshort 'root', 'F', chaltr %split_chalt;
