Error reporting macros.
ni does its best to protect users from doing things they'll regret, such as
allocating humongous chunks of memory instead of splitting things into smaller
packets. When it thinks you're misusing it, it will present you with a "nope"
condition and give you the option to fix it.

NB: headers included here will be moved to the top of the generated C source,
so this actually does what we want.

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#define NI_USER_ERROR    1
#define NI_SYSTEM_ERROR  2
#define NI_THIS_IS_A_BUG 3

#define NI_LIMIT_NOPE  1
#define NI_ASSERT_NOPE 2

void ni_nope_exit(int const reason) {
  switch (reason) {
    case NI_LIMIT_NOPE:
      fprintf(stderr, "exiting with code %d due to exceeded limit\n", reason);
      exit(NI_USER_ERROR);
      break;
    case NI_ASSERT_NOPE:
      fprintf(stderr, "exiting with code %d due to failed assert\n", reason);
      exit(NI_THIS_IS_A_BUG);
      break;
    default:
      fprintf(stderr, "exiting for unknown reason (ni bug): %d\n", reason);
      exit(NI_THIS_IS_A_BUG);
      break;
  }
}

#define ni_assert_nope(cond, ...)                                       \
  do {                                                                  \
    if (!(cond)) {                                                      \
      fprintf(stderr, __VA_ARGS__);                                     \
      fprintf(stderr, "(this is a ni bug; sorry about this)\n");        \
      ni_nope_exit(NI_ASSERT_NOPE);                                     \
    }                                                                   \
  } while (0)

#define ni_limit_nope(val, limit, ...)                                  \
  do {                                                                  \
    uint64_t nope_val = (val);                                          \
    while (nope_val > limit) {                                          \
      fprintf(stderr, __VA_ARGS__);                                     \
      fprintf(stderr, "\n"                                              \
                      "- 'n' to exit ni\n"                              \
                      "- a new number to change the limit\n"            \
                      "- 'y' to increase the limit and Just Work\n"     \
                      "> ");                                            \
      fflush(stderr);                                                   \
      unsigned long long nope_new_limit;                                \
      if (fscanf(stderr, "%llu", &nope_new_limit))                      \
        limit = nope_new_limit;                                         \
      else {                                                            \
        char nope_reply;                                                \
        fscanf(stderr, "%c", &nope_reply);                              \
        switch (nope_reply) {                                           \
          case 'n':                                                     \
            ni_nope_exit(NI_LIMIT_NOPE);                                \
            break;                                                      \
          case 'y':                                                     \
            limit = nope_val;                                           \
            break;                                                      \
        }                                                               \
      }                                                                 \
    }                                                                   \
  } while (0)
