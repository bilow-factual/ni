#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>


Contents of argv[].
The surrounding shell script will do one of two things when executing this
program. One possibility is a direct passthrough, like this:

| $ exec ni "$@"

The expectation is that ni proceeds to parse options normally, not deleting its
image or source. The other possibility is that the shell script prepends the
option `--ni:invisible` and the containing directory. In this case, we're
expected to delete our on-disk image and then the containing directory.

int main(int argc, char const **argv) {
  if (argc >= 3 && !strcmp("--ni:invisible", argv[1])) {
    if (unlink(argv[0]))
      warn("NI_INVISIBLE failed to unlink image %s\n", argv[0]);
    else
      if (rmdir(argv[2]))
        warn("NI_INVISIBLE failed to unlink directory %s\n", argv[2]);
    argv[2] = argv[0];
    argv += 2;
    argc -= 2;
  }

  int const stdin_tty = isatty(STDIN_FILENO);
  if (argc <= 1 && stdin_tty) {
    fprintf(stderr, "TODO: print usage\n");
    return EXIT_USER_ERROR;
  }

  for_rs_parts(qsh_ni_header_sh, i) printf("%s", qsh_ni_header_sh[i]);
  printf("awk '");
  for_rs_parts(qsh_decompress_awk, i) printf("%s", qsh_decompress_awk[i]);
  printf("' <<'EOF'\n");
  for_rs_names(i) {
    int nparts = 0;
    for_rs_parts(rs[i], j) nparts = j + 1;
    printf("%d %s\n", nparts, rn[i]);
    for_rs_parts(rs[i], j) printf("%s", rs[i][j]);
  }
  printf("EOF\n");
  for_rs_parts(qsh_ni_footer_sh, i) printf("%s", qsh_ni_footer_sh[i]);
  return EXIT_NORMAL;
}
